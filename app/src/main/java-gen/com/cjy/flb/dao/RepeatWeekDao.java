package com.cjy.flb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cjy.flb.db.RepeatWeek;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPEAT_WEEK".
*/
public class RepeatWeekDao extends AbstractDao<RepeatWeek, Long> {

    public static final String TABLENAME = "REPEAT_WEEK";

    /**
     * Properties of entity RepeatWeek.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Medic_id = new Property(1, String.class, "medic_id", false, "MEDIC_ID");
        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
        public final static Property IsEvery = new Property(3, Boolean.class, "isEvery", false, "IS_EVERY");
        public final static Property IsMorn = new Property(4, Boolean.class, "isMorn", false, "IS_MORN");
        public final static Property IsTue = new Property(5, Boolean.class, "isTue", false, "IS_TUE");
        public final static Property IsWed = new Property(6, Boolean.class, "isWed", false, "IS_WED");
        public final static Property IsThu = new Property(7, Boolean.class, "isThu", false, "IS_THU");
        public final static Property IsFri = new Property(8, Boolean.class, "isFri", false, "IS_FRI");
        public final static Property IsSat = new Property(9, Boolean.class, "isSat", false, "IS_SAT");
        public final static Property IsSun = new Property(10, Boolean.class, "isSun", false, "IS_SUN");
    };


    public RepeatWeekDao(DaoConfig config) {
        super(config);
    }
    
    public RepeatWeekDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPEAT_WEEK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEDIC_ID\" TEXT," + // 1: medic_id
                "\"NUMBER\" TEXT," + // 2: number
                "\"IS_EVERY\" INTEGER," + // 3: isEvery
                "\"IS_MORN\" INTEGER," + // 4: isMorn
                "\"IS_TUE\" INTEGER," + // 5: isTue
                "\"IS_WED\" INTEGER," + // 6: isWed
                "\"IS_THU\" INTEGER," + // 7: isThu
                "\"IS_FRI\" INTEGER," + // 8: isFri
                "\"IS_SAT\" INTEGER," + // 9: isSat
                "\"IS_SUN\" INTEGER);"); // 10: isSun
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPEAT_WEEK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RepeatWeek entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String medic_id = entity.getMedic_id();
        if (medic_id != null) {
            stmt.bindString(2, medic_id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        Boolean isEvery = entity.getIsEvery();
        if (isEvery != null) {
            stmt.bindLong(4, isEvery ? 1L: 0L);
        }
 
        Boolean isMorn = entity.getIsMorn();
        if (isMorn != null) {
            stmt.bindLong(5, isMorn ? 1L: 0L);
        }
 
        Boolean isTue = entity.getIsTue();
        if (isTue != null) {
            stmt.bindLong(6, isTue ? 1L: 0L);
        }
 
        Boolean isWed = entity.getIsWed();
        if (isWed != null) {
            stmt.bindLong(7, isWed ? 1L: 0L);
        }
 
        Boolean isThu = entity.getIsThu();
        if (isThu != null) {
            stmt.bindLong(8, isThu ? 1L: 0L);
        }
 
        Boolean isFri = entity.getIsFri();
        if (isFri != null) {
            stmt.bindLong(9, isFri ? 1L: 0L);
        }
 
        Boolean isSat = entity.getIsSat();
        if (isSat != null) {
            stmt.bindLong(10, isSat ? 1L: 0L);
        }
 
        Boolean isSun = entity.getIsSun();
        if (isSun != null) {
            stmt.bindLong(11, isSun ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RepeatWeek readEntity(Cursor cursor, int offset) {
        RepeatWeek entity = new RepeatWeek( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // medic_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isEvery
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isMorn
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isTue
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isWed
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isThu
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isFri
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isSat
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // isSun
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RepeatWeek entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMedic_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsEvery(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsMorn(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIsTue(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsWed(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsThu(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsFri(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsSat(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsSun(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RepeatWeek entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RepeatWeek entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
