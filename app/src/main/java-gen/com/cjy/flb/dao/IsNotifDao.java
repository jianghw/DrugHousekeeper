package com.cjy.flb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cjy.flb.db.IsNotif;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IS_NOTIF".
*/
public class IsNotifDao extends AbstractDao<IsNotif, Long> {

    public static final String TABLENAME = "IS_NOTIF";

    /**
     * Properties of entity IsNotif.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Today = new Property(1, String.class, "today", false, "TODAY");
        public final static Property Medic_id = new Property(2, String.class, "medic_id", false, "MEDIC_ID");
        public final static Property Medic_name = new Property(3, String.class, "medic_name", false, "MEDIC_NAME");
        public final static Property Medic_phone = new Property(4, String.class, "medic_phone", false, "MEDIC_PHONE");
        public final static Property IsMOut = new Property(5, Boolean.class, "isMOut", false, "IS_MOUT");
        public final static Property IsM = new Property(6, Integer.class, "isM", false, "IS_M");
        public final static Property IsNOut = new Property(7, Boolean.class, "isNOut", false, "IS_NOUT");
        public final static Property IsN = new Property(8, Integer.class, "isN", false, "IS_N");
        public final static Property IsAOut = new Property(9, Boolean.class, "isAOut", false, "IS_AOUT");
        public final static Property IsA = new Property(10, Integer.class, "isA", false, "IS_A");
        public final static Property IsEOut = new Property(11, Boolean.class, "isEOut", false, "IS_EOUT");
        public final static Property IsE = new Property(12, Integer.class, "isE", false, "IS_E");
    };


    public IsNotifDao(DaoConfig config) {
        super(config);
    }
    
    public IsNotifDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IS_NOTIF\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TODAY\" TEXT," + // 1: today
                "\"MEDIC_ID\" TEXT," + // 2: medic_id
                "\"MEDIC_NAME\" TEXT," + // 3: medic_name
                "\"MEDIC_PHONE\" TEXT," + // 4: medic_phone
                "\"IS_MOUT\" INTEGER," + // 5: isMOut
                "\"IS_M\" INTEGER," + // 6: isM
                "\"IS_NOUT\" INTEGER," + // 7: isNOut
                "\"IS_N\" INTEGER," + // 8: isN
                "\"IS_AOUT\" INTEGER," + // 9: isAOut
                "\"IS_A\" INTEGER," + // 10: isA
                "\"IS_EOUT\" INTEGER," + // 11: isEOut
                "\"IS_E\" INTEGER);"); // 12: isE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IS_NOTIF\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IsNotif entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String today = entity.getToday();
        if (today != null) {
            stmt.bindString(2, today);
        }
 
        String medic_id = entity.getMedic_id();
        if (medic_id != null) {
            stmt.bindString(3, medic_id);
        }
 
        String medic_name = entity.getMedic_name();
        if (medic_name != null) {
            stmt.bindString(4, medic_name);
        }
 
        String medic_phone = entity.getMedic_phone();
        if (medic_phone != null) {
            stmt.bindString(5, medic_phone);
        }
 
        Boolean isMOut = entity.getIsMOut();
        if (isMOut != null) {
            stmt.bindLong(6, isMOut ? 1L: 0L);
        }
 
        Integer isM = entity.getIsM();
        if (isM != null) {
            stmt.bindLong(7, isM);
        }
 
        Boolean isNOut = entity.getIsNOut();
        if (isNOut != null) {
            stmt.bindLong(8, isNOut ? 1L: 0L);
        }
 
        Integer isN = entity.getIsN();
        if (isN != null) {
            stmt.bindLong(9, isN);
        }
 
        Boolean isAOut = entity.getIsAOut();
        if (isAOut != null) {
            stmt.bindLong(10, isAOut ? 1L: 0L);
        }
 
        Integer isA = entity.getIsA();
        if (isA != null) {
            stmt.bindLong(11, isA);
        }
 
        Boolean isEOut = entity.getIsEOut();
        if (isEOut != null) {
            stmt.bindLong(12, isEOut ? 1L: 0L);
        }
 
        Integer isE = entity.getIsE();
        if (isE != null) {
            stmt.bindLong(13, isE);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IsNotif readEntity(Cursor cursor, int offset) {
        IsNotif entity = new IsNotif( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // today
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // medic_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // medic_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // medic_phone
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isMOut
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isM
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isNOut
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isN
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isAOut
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // isA
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isEOut
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // isE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IsNotif entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToday(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMedic_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMedic_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMedic_phone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsMOut(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsM(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsNOut(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsN(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsAOut(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsA(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsEOut(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setIsE(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IsNotif entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IsNotif entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
