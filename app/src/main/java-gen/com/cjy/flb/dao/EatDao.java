package com.cjy.flb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cjy.flb.db.Eat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EAT".
*/
public class EatDao extends AbstractDao<Eat, Long> {

    public static final String TABLENAME = "EAT";

    /**
     * Properties of entity Eat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Device_uid = new Property(1, String.class, "device_uid", false, "DEVICE_UID");
        public final static Property Eat_medicine_time = new Property(2, String.class, "eat_medicine_time", false, "EAT_MEDICINE_TIME");
        public final static Property Number = new Property(3, Integer.class, "number", false, "NUMBER");
        public final static Property Taken = new Property(4, Boolean.class, "taken", false, "TAKEN");
    };


    public EatDao(DaoConfig config) {
        super(config);
    }
    
    public EatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_UID\" TEXT NOT NULL ," + // 1: device_uid
                "\"EAT_MEDICINE_TIME\" TEXT," + // 2: eat_medicine_time
                "\"NUMBER\" INTEGER," + // 3: number
                "\"TAKEN\" INTEGER);"); // 4: taken
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EAT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Eat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDevice_uid());
 
        String eat_medicine_time = entity.getEat_medicine_time();
        if (eat_medicine_time != null) {
            stmt.bindString(3, eat_medicine_time);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(4, number);
        }
 
        Boolean taken = entity.getTaken();
        if (taken != null) {
            stmt.bindLong(5, taken ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Eat readEntity(Cursor cursor, int offset) {
        Eat entity = new Eat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // device_uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // eat_medicine_time
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // number
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // taken
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Eat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevice_uid(cursor.getString(offset + 1));
        entity.setEat_medicine_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTaken(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Eat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Eat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
