package com.cjy.flb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cjy.flb.db.EatTime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EAT_TIME".
*/
public class EatTimeDao extends AbstractDao<EatTime, Long> {

    public static final String TABLENAME = "EAT_TIME";

    /**
     * Properties of entity EatTime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Medic_id = new Property(1, String.class, "medic_id", false, "MEDIC_ID");
        public final static Property Morn = new Property(2, Long.class, "morn", false, "MORN");
        public final static Property Non = new Property(3, Long.class, "non", false, "NON");
        public final static Property After = new Property(4, Long.class, "after", false, "AFTER");
        public final static Property Even = new Property(5, Long.class, "even", false, "EVEN");
        public final static Property MornS = new Property(6, String.class, "mornS", false, "MORN_S");
        public final static Property NonS = new Property(7, String.class, "nonS", false, "NON_S");
        public final static Property AfterS = new Property(8, String.class, "afterS", false, "AFTER_S");
        public final static Property EvenS = new Property(9, String.class, "evenS", false, "EVEN_S");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(11, String.class, "phone", false, "PHONE");
    };


    public EatTimeDao(DaoConfig config) {
        super(config);
    }
    
    public EatTimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EAT_TIME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEDIC_ID\" TEXT," + // 1: medic_id
                "\"MORN\" INTEGER," + // 2: morn
                "\"NON\" INTEGER," + // 3: non
                "\"AFTER\" INTEGER," + // 4: after
                "\"EVEN\" INTEGER," + // 5: even
                "\"MORN_S\" TEXT," + // 6: mornS
                "\"NON_S\" TEXT," + // 7: nonS
                "\"AFTER_S\" TEXT," + // 8: afterS
                "\"EVEN_S\" TEXT," + // 9: evenS
                "\"NAME\" TEXT," + // 10: name
                "\"PHONE\" TEXT);"); // 11: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EAT_TIME\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EatTime entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String medic_id = entity.getMedic_id();
        if (medic_id != null) {
            stmt.bindString(2, medic_id);
        }
 
        Long morn = entity.getMorn();
        if (morn != null) {
            stmt.bindLong(3, morn);
        }
 
        Long non = entity.getNon();
        if (non != null) {
            stmt.bindLong(4, non);
        }
 
        Long after = entity.getAfter();
        if (after != null) {
            stmt.bindLong(5, after);
        }
 
        Long even = entity.getEven();
        if (even != null) {
            stmt.bindLong(6, even);
        }
 
        String mornS = entity.getMornS();
        if (mornS != null) {
            stmt.bindString(7, mornS);
        }
 
        String nonS = entity.getNonS();
        if (nonS != null) {
            stmt.bindString(8, nonS);
        }
 
        String afterS = entity.getAfterS();
        if (afterS != null) {
            stmt.bindString(9, afterS);
        }
 
        String evenS = entity.getEvenS();
        if (evenS != null) {
            stmt.bindString(10, evenS);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(12, phone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EatTime readEntity(Cursor cursor, int offset) {
        EatTime entity = new EatTime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // medic_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // morn
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // non
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // after
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // even
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mornS
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nonS
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // afterS
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // evenS
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // phone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EatTime entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMedic_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMorn(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setNon(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setAfter(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEven(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMornS(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNonS(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAfterS(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEvenS(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EatTime entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EatTime entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
