package com.cjy.flb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cjy.flb.db.Box;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOX".
*/
public class BoxDao extends AbstractDao<Box, Long> {

    public static final String TABLENAME = "BOX";

    /**
     * Properties of entity Box.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BoxId = new Property(0, Long.class, "boxId", true, "BOX_ID");
        public final static Property Day_in_week = new Property(1, String.class, "day_in_week", false, "DAY_IN_WEEK");
        public final static Property Point_in_time = new Property(2, String.class, "point_in_time", false, "POINT_IN_TIME");
        public final static Property Number = new Property(3, Integer.class, "number", false, "NUMBER");
    };


    public BoxDao(DaoConfig config) {
        super(config);
    }
    
    public BoxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOX\" (" + //
                "\"BOX_ID\" INTEGER PRIMARY KEY ," + // 0: boxId
                "\"DAY_IN_WEEK\" TEXT NOT NULL ," + // 1: day_in_week
                "\"POINT_IN_TIME\" TEXT NOT NULL ," + // 2: point_in_time
                "\"NUMBER\" INTEGER);"); // 3: number
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOX\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Box entity) {
        stmt.clearBindings();
 
        Long boxId = entity.getBoxId();
        if (boxId != null) {
            stmt.bindLong(1, boxId);
        }
        stmt.bindString(2, entity.getDay_in_week());
        stmt.bindString(3, entity.getPoint_in_time());
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(4, number);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Box readEntity(Cursor cursor, int offset) {
        Box entity = new Box( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // boxId
            cursor.getString(offset + 1), // day_in_week
            cursor.getString(offset + 2), // point_in_time
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // number
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Box entity, int offset) {
        entity.setBoxId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDay_in_week(cursor.getString(offset + 1));
        entity.setPoint_in_time(cursor.getString(offset + 2));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Box entity, long rowId) {
        entity.setBoxId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Box entity) {
        if(entity != null) {
            return entity.getBoxId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
